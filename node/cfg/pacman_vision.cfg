#!/usr/bin/env python
PACKAGE = "pacman_vision"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#           Name    Type  ReconfigureLevel    Description   Default   Min   Max
#Node
gen.add("enable_processor", bool_t, 0, "Enable Processor module", True)
gen.add("enable_estimator", bool_t, 0, "Enable Estimator module", False)
gen.add("enable_tracker", bool_t, 0, "Enable Tracker module", False)

#Processor
gen.add("processor_filtering", bool_t, 0, "Enable Passthrough filter in Processor module", True)
gen.add("processor_downsampling", bool_t, 0, "Enable VoxelGrid filter in Processor module", False)
gen.add("processor_keep_organized", bool_t, 0, "Tell Processor filters to keep the point cloud organized, if possible", False)
gen.add("processor_pass_xmin", double_t, 0, "Passthrough filter lower bound for X (in meters)", -0.5, -2.0, 2.0)
gen.add("processor_pass_xmax", double_t, 0, "Passthrough filter upper bound for X (in meters)", 0.5, -2.0, 2.0)
gen.add("processor_pass_ymin", double_t, 0, "Passthrough filter lower bound for Y (in meters)", -0.5, -2.0, 2.0)
gen.add("processor_pass_ymax", double_t, 0, "Passthrough filter upper bound for Y (in meters)", 0.5, -2.0, 2.0)
gen.add("processor_pass_zmin", double_t, 0, "Passthrough filter lower bound for Z (in meters)", 0.0, 0.0, 5.0)
gen.add("processor_pass_zmax", double_t, 0, "Passthrough filter upper bound for Z (in meters)", 1.0, 0.0, 5.0)
gen.add("processor_leaf_size", double_t, 0, "VoxelGrid filter leaf size (in meters), only relevant if enabled", 0.003, 0.0, 0.5)

#Estimator
gen.add("estimator_object_calibration", bool_t, 0, "Enable this flag only when performing object-star calibration. When this flag is enabled all estimated objects will be called <object>(for compatibility with calibration package).", False)
gen.add("estimator_iterations", int_t, 0, "Control Pose Estimation iterations, during candidate refinement with Progressive Bisection. (Increasing this value will increase estimation time)", 5, 1, 100)
gen.add("estimator_neighbors", int_t, 0, "Control how many neighbors are retrived from pose estimation database, each retrieved neighbor will then be refined with Progressive Bisection. (Increasing this value may improve recognition at the cost of execution time)", 10, 1, 100)
gen.add("estimator_clus_tol", double_t, 0, "Euclidean clustering tolerance (in meters), used to separate object clusters during table top segmentation.", 0.05, 0.001, 0.5)


exit(gen.generate(PACKAGE, "pacman_vision", "pacman_vision"))
