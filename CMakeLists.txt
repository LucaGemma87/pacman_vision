# Project top level cmake

cmake_minimum_required(VERSION 2.8.11)
project(pacman_vision)

################################################################################
###########   Control Package Build Behaviour ##################################
###########   Change these according to your will ##############################
################################################################################
## This will build estimator and tracker modules
set (PACV_BUILD_RECOGNITION        0 )
## This will build vito listener module
set (PACV_BUILD_LISTENER           0 )
## This will build in hand modeler module
set (PACV_BUILD_MODELER            0 )
## This will build Kinect2 Processor
set (PACV_BUILD_KINECT2            0 )

################################################################################
######### Check for c++11 support or we won't get far... #######################
################################################################################
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSEIF(COMPILER_SUPPORTS_CXX0X)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
  MESSAGE(ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

################################################################################
########## Lets find everything we need, yes we need a lot of things! ##########
################################################################################
#Include selfmade FindFOO cmake modules, if needed for future works
#(right now there's only VCG library and it is not used)
# list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules/")
#Find Boost
find_package(Boost REQUIRED
    COMPONENTS
    filesystem
    )
#Find HDF5
find_package(HDF5 REQUIRED)
#Find PCL
find_package(PCL 1.7.2 COMPONENTS common filters io
                segmentation sample_consensus search REQUIRED)
add_definitions(${PCL_DEFINITIONS})
link_directories(${PCL_LIBRARY_DIRS})
##Eigen
# find_package(Eigen REQUIRED)
##Qt
find_package(Qt4 4.8 REQUIRED QtGui QtXml)
##Find Catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  pcl_conversions
  roscpp
  roslib
  sensor_msgs
  tf
  pacman_vision_comm
  visualization_msgs
  cmake_modules
  )
##Catkin specific configuration:
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS
    include
    # ${EIGEN_INCLUDE_DIRS}
    ${PCL_INCLUDE_DIRS}
  LIBRARIES
    pacv_libcommon
  CATKIN_DEPENDS
    geometry_msgs
    pcl_conversions
    roscpp
    roslib
    sensor_msgs
    tf
    pacman_vision_comm
    visualization_msgs
    message_runtime
  # DEPENDS ${EXT_DEPS}
)
#include a bunch of dirs to search path
include_directories(include src/pacman_vision src/basic_node/gui)
include_directories(${catkin_INCLUDE_DIRS})
include_directories(BEFORE ${PCL_INCLUDE_DIRS} SYSTEM)
include_directories(SYSTEM
                    # ${EIGEN_INCLUDE_DIRS}
                    ${HDF5_INCLUDE_DIRS}
                    ${Boost_INCLUDE_DIRS}
                    )

##Qt stuff for autogeneration of files (moc, ui and qrc)
set(CMAKE_INCLUDE_CURRENT_DIR ON) # this will add build dir to include path.
                                  # Where all this autogenerated files will go!
set(CMAKE_AUTOMOC ON)
#Sadly these don't exist in cmake 2.8, only in cmake > 3.0
# set(CMAKE_AUTOUIC ON)
# set(CMAKE_AUTORCC ON)

################################################################################
####### Set the project sources ################################################
################################################################################
set(SOURCES
    src/pacman_vision/pacman_vision.cpp
    src/pacman_vision/main.cpp
    )
#set some variables to be filled by subdirectories with external libs and incls
set(MORE_INCLUDE_DIRS )
set(MORE_LIBRARIES )
################################################################################
########### Start doing things. Add the always built common lib ################
################################################################################
add_subdirectory(src/common)
LIST(APPEND LIBRARIES
    ${PACV_COMMON_LIB})

################################################################################
########### Also add the always built basic_node as a lib ######################
################ and its Gui ###################################################
################################################################################
add_subdirectory(src/basic_node)
LIST(APPEND LIBRARIES
    ${PACV_BASICNODE_LIB})

add_subdirectory(src/basic_node/gui)
LIST(APPEND LIBRARIES
    ${PACV_BASICGUI_LIB})


IF(PACV_BUILD_RECOGNITION)
    add_subdirectory(src/recognition)
ENDIF(PACV_BUILD_RECOGNITION)

IF(PACV_BUILD_LISTENER)
    add_subdirectory(src/listener)
ENDIF(PACV_BUILD_LISTENER)

IF(PACV_BUILD_MODELER)
    add_subdirectory(src/modeler)
ENDIF(PACV_BUILD_MODELER)

include_directories(${MORE_INCLUDE_DIRS})

# IF(PACMAN_VISION_BUILD_RECOGNITION) tobe moved into recognition cmakelists
#     ########################
#     ## Find pel in system ##
#     find_package(pel 0.6)
#     IF(pel_FOUND)
#         set(PACMAN_VISION_WITH_PEL_SUPPORT 1)
#         include_directories(${pel_INCLUDE_DIRS})
#         LIST(APPEND SOURCES
#             # src/estimator.cpp TODO remove hpp from main
#             # src/tracker.cpp
#         )
#         LIST(APPEND LIBRARIES
#             ${pel_LIBRARIES}
#         )
#         LIST(APPEND LINK_DIR
#             ${pel_LIBRARY_DIRS}
#         )
#         LIST(APPEND EXT_DEPS
#             pel)
#     ELSE(pel_FOUND)
#         unset(PACMAN_VISION_WITH_PEL_SUPPORT)
#         unset(PACMAN_VISION_BUILD_RECOGNITION)
#         message(WARNING "=============================================================")
#         message(WARNING "== Pel NOT found, disabling estimator and tracker modules. ==")
#         message(WARNING "=============================================================")
#     ENDIF(pel_FOUND)
# ENDIF(PACMAN_VISION_BUILD_RECOGNITION)
# IF(PACV_RECOGNITION_SUPPORT)
#     ##POST BUILD COMMAND to fetch PEL database
#     set(wget_arg "-OpelDB.tar.gz")
#     set(wget_url "https://www.dropbox.com/s/79vy38432vv80gu/PELdatabase.tar.gz?dl=0")
#     set(tar_arg "-zxvf")
#     set(tar_tgt "pelDB.tar.gz")
#     set(rm_comm "pelDB.tar.gz")
#     set(rm_arg "-rf")
#     set(rm_db "database")
#     add_custom_command(TARGET pacman_vision  <-- make it to estimator lib
#         POST_BUILD
#         COMMAND rm ${rm_db} ${rm_arg}
#         COMMAND wget ${wget_arg} ${wget_url}
#         COMMAND tar ${tar_arg} ${tar_tgt}
#         COMMAND rm ${rm_comm}
#         WORKING_DIRECTORY ${pacman_vision_SOURCE_DIR}
#         )
# ENDIF(PACV_RECOGNITION_SUPPORT)

################################################################################
####### Create a Config File with the results of our modular build #############
################################################################################
configure_file("${PROJECT_SOURCE_DIR}/cmake/config_h.cmake.in"
  "${CATKIN_DEVEL_PREFIX}/include/pacv_config.h")
include_directories(${CATKIN_DEVEL_PREFIX}/include)

################################################################################
####################### Now Build the project ##################################
################################################################################

add_executable(pacman_vision ${SOURCES})

#add those ros geneated headers from communications
add_dependencies(pacman_vision
  pacman_vision_comm_generate_messages_cpp
  )

target_link_libraries(pacman_vision
    ${LIBRARIES}
    ${MORE_LIBRARIES}
    ${catkin_LIBRARIES}
    ${PCL_COMMON_LIBRARIES}
    ${PCL_FILTERS_LIBRARIES}
    ${PCL_SEGMENTATION_LIBRARIES}
    ${PCL_SAMPLE_CONSENSUS_LIBRARIES}
    ${PCL_SEARCH_LIBRARIES}
    ${PCL_IO_LIBRARIES}
    ${Boost_LIBRARIES}
    ${HDF5_LIBRARIES}
    # ${EIGEN_LIBRARIES}
    Qt4::QtGui Qt4::QtXml
)
########################################################################## DONE!
